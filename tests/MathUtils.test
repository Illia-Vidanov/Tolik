#include "Math/Utils.hpp"

#include <gtest/gtest.h>

#include "TestSetup.hpp"

TEST(NumberDigitsTest, NmberDigitsReturn)
{
    EXPECT_EQ(NumberDigits(static_cast<char>(9)), 1);
    EXPECT_EQ(NumberDigits(static_cast<char>(99)), 2);
    EXPECT_EQ(NumberDigits(static_cast<char>(10)), 2);
    EXPECT_EQ(NumberDigits(static_cast<char>(100)), 3);
    EXPECT_EQ(NumberDigits(static_cast<unsigned char>(9)), 1);
    EXPECT_EQ(NumberDigits(static_cast<unsigned char>(10)), 2);
    EXPECT_EQ(NumberDigits(static_cast<unsigned char>(99)), 2);
    EXPECT_EQ(NumberDigits(static_cast<unsigned char>(100)), 3);

    EXPECT_EQ(NumberDigits(static_cast<short>(9)), 1);
    EXPECT_EQ(NumberDigits(static_cast<short>(99)), 2);
    EXPECT_EQ(NumberDigits(static_cast<short>(999)), 3);
    EXPECT_EQ(NumberDigits(static_cast<short>(9999)), 4);
    EXPECT_EQ(NumberDigits(static_cast<short>(std::numeric_limits<short>::max())), 5);

    EXPECT_EQ(NumberDigits(static_cast<unsigned short>(9)), 1);
    EXPECT_EQ(NumberDigits(static_cast<unsigned short>(99)), 2);
    EXPECT_EQ(NumberDigits(static_cast<unsigned short>(999)), 3);
    EXPECT_EQ(NumberDigits(static_cast<unsigned short>(9999)), 4);
    EXPECT_EQ(NumberDigits(static_cast<unsigned short>(std::numeric_limits<unsigned short>::max())), 5);
    
    EXPECT_EQ(NumberDigits(static_cast<int>(9)), 1);
    EXPECT_EQ(NumberDigits(static_cast<int>(99)), 2);
    EXPECT_EQ(NumberDigits(static_cast<int>(999)), 3);
    EXPECT_EQ(NumberDigits(static_cast<int>(9999)), 4);
    EXPECT_EQ(NumberDigits(static_cast<int>(99999)), 5);
    EXPECT_EQ(NumberDigits(static_cast<int>(999999)), 6);
    EXPECT_EQ(NumberDigits(static_cast<int>(9999999)), 7);
    EXPECT_EQ(NumberDigits(static_cast<int>(99999999)), 8);
    EXPECT_EQ(NumberDigits(static_cast<int>(999999999)), 9);
    EXPECT_EQ(NumberDigits(static_cast<int>(std::numeric_limits<int>::max())), 10);

    EXPECT_EQ(NumberDigits(static_cast<unsigned int>(9)), 1);
    EXPECT_EQ(NumberDigits(static_cast<unsigned int>(99)), 2);
    EXPECT_EQ(NumberDigits(static_cast<unsigned int>(999)), 3);
    EXPECT_EQ(NumberDigits(static_cast<unsigned int>(9999)), 4);
    EXPECT_EQ(NumberDigits(static_cast<unsigned int>(99999)), 5);
    EXPECT_EQ(NumberDigits(static_cast<unsigned int>(999999)), 6);
    EXPECT_EQ(NumberDigits(static_cast<unsigned int>(9999999)), 7);
    EXPECT_EQ(NumberDigits(static_cast<unsigned int>(99999999)), 8);
    EXPECT_EQ(NumberDigits(static_cast<unsigned int>(999999999)), 9);
    EXPECT_EQ(NumberDigits(static_cast<unsigned int>(std::numeric_limits<unsigned int>::max())), 10);
    
    EXPECT_EQ(NumberDigits(static_cast<long long>(9)), 1);
    EXPECT_EQ(NumberDigits(static_cast<long long>(99)), 2);
    EXPECT_EQ(NumberDigits(static_cast<long long>(999)), 3);
    EXPECT_EQ(NumberDigits(static_cast<long long>(9999)), 4);
    EXPECT_EQ(NumberDigits(static_cast<long long>(99999)), 5);
    EXPECT_EQ(NumberDigits(static_cast<long long>(999999)), 6);
    EXPECT_EQ(NumberDigits(static_cast<long long>(9999999)), 7);
    EXPECT_EQ(NumberDigits(static_cast<long long>(99999999)), 8);
    EXPECT_EQ(NumberDigits(static_cast<long long>(999999999)), 9);
    EXPECT_EQ(NumberDigits(static_cast<long long>(9999999999)), 10);
    EXPECT_EQ(NumberDigits(static_cast<long long>(99999999999)), 11);
    EXPECT_EQ(NumberDigits(static_cast<long long>(999999999999)), 12);
    EXPECT_EQ(NumberDigits(static_cast<long long>(9999999999999)), 13);
    EXPECT_EQ(NumberDigits(static_cast<long long>(99999999999999)), 14);
    EXPECT_EQ(NumberDigits(static_cast<long long>(999999999999999)), 15);
    EXPECT_EQ(NumberDigits(static_cast<long long>(9999999999999999)), 16);
    EXPECT_EQ(NumberDigits(static_cast<long long>(99999999999999999)), 17);
    EXPECT_EQ(NumberDigits(static_cast<long long>(999999999999999999)), 18);
    EXPECT_EQ(NumberDigits(static_cast<long long>(std::numeric_limits<long long>::max())), 19);

    EXPECT_EQ(NumberDigits(static_cast<unsigned long long>(9)), 1);
    EXPECT_EQ(NumberDigits(static_cast<unsigned long long>(99)), 2);
    EXPECT_EQ(NumberDigits(static_cast<unsigned long long>(999)), 3);
    EXPECT_EQ(NumberDigits(static_cast<unsigned long long>(9999)), 4);
    EXPECT_EQ(NumberDigits(static_cast<unsigned long long>(99999)), 5);
    EXPECT_EQ(NumberDigits(static_cast<unsigned long long>(999999)), 6);
    EXPECT_EQ(NumberDigits(static_cast<unsigned long long>(9999999)), 7);
    EXPECT_EQ(NumberDigits(static_cast<unsigned long long>(99999999)), 8);
    EXPECT_EQ(NumberDigits(static_cast<unsigned long long>(999999999)), 9);
    EXPECT_EQ(NumberDigits(static_cast<unsigned long long>(9999999999)), 10);
    EXPECT_EQ(NumberDigits(static_cast<unsigned long long>(99999999999)), 11);
    EXPECT_EQ(NumberDigits(static_cast<unsigned long long>(999999999999)), 12);
    EXPECT_EQ(NumberDigits(static_cast<unsigned long long>(9999999999999)), 13);
    EXPECT_EQ(NumberDigits(static_cast<unsigned long long>(99999999999999)), 14);
    EXPECT_EQ(NumberDigits(static_cast<unsigned long long>(999999999999999)), 15);
    EXPECT_EQ(NumberDigits(static_cast<unsigned long long>(9999999999999999)), 16);
    EXPECT_EQ(NumberDigits(static_cast<unsigned long long>(99999999999999999)), 17);
    EXPECT_EQ(NumberDigits(static_cast<unsigned long long>(999999999999999999)), 18);
    EXPECT_EQ(NumberDigits(static_cast<unsigned long long>(9999999999999999999u)), 19);
    EXPECT_EQ(NumberDigits(static_cast<unsigned long long>(std::numeric_limits<unsigned long long>::max())), 20);
}

TEST(NumberDigitsTest, NumberDigitsIgnoreMinus)
{
    EXPECT_EQ(NumberDigits(static_cast<int>(-9)), 1);
}

TEST(NumberDigitsTest, NumberDigitsZeroEqZero)
{
    EXPECT_EQ(NumberDigits(0), 0);
}


TEST(IntegralPowerTest, IntegralPowerReturn)
{
    EXPECT_EQ(IntegralPower(2, 4), 16);
    EXPECT_EQ(IntegralPower(3, 5), 243);
    EXPECT_TRUE(AreSame(IntegralPower<float>(2, -4), 0.0625));
    EXPECT_TRUE(AreSame(IntegralPower<float>(3, -5), 0.004115));
}


TEST(GetDigitTest, GetDigitReturn)
{
    EXPECT_EQ(GetDigit(9876543210, 0), 0);
    EXPECT_EQ(GetDigit(987654321, 0), 1);
    EXPECT_EQ(GetDigit(9876543210, 9), 9);
    EXPECT_EQ(GetDigit(9876543210, 10), 0);
    EXPECT_EQ(GetDigit(9876543210, 100), 0);
    EXPECT_EQ(GetDigit(9876543210, -1), 0);
    EXPECT_EQ(GetDigit(9876543210, -100), 0);
}


TEST(FastPowerTest, FastPowerReturn)
{
    EXPECT_EQ(FastPower10(0), 1);
    EXPECT_EQ(FastPower10(1), 10);
    EXPECT_EQ(FastPower10(9), 1000000000);
    EXPECT_EQ(FastPower10<unsigned long long>(19), 10000000000000000000ULL);
    EXPECT_EQ(FastPower10(-0), 1);
    EXPECT_TRUE(AreSame(FastPower10<double>(-1), 0.1));
    EXPECT_TRUE(AreSame(FastPower10<double>(-19), 0.0000000000000000001));
}

TEST(FastPowerTest, FastPowerOverflow)
{
    EXPECT_EQ(FastPower10<unsigned long long>(20), 0);
    EXPECT_TRUE(AreSame(FastPower10<double>(-21), 0.000000000000000000001));
}

int main(int argc, char **argv)
{
    testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}