#include "Algorithms/Palindromes.hpp"

#include <gtest/gtest.h>

#include "TestSetup.hpp"

TEST(GetAllPalindromesTest, GetAllPalindromesCount)
{
    auto callback =
    [](short i)
    {
        static int count;
        count++;
        if(i == -1)
        {
            EXPECT_EQ(count, 240);
        }
    };

    palindrome::GetAllPalindromes(callback);
    callback(-1);
}

TEST(GetPalindromesDigitCountRangeTest, GetPalindromesDigitCountRangeCount)
{
    auto callback =
    [](int i)
    {
        static int count;

        std::cout << i << ' ' << count << '\n';

        if(i == -1)
        {
            EXPECT_EQ(count, 1080);
            return;
        }

        count++;
    };

    palindrome::GetPalindromesDigitCountRange(palindrome::DigitCountRange(3, 6), callback);
    callback(-1);
}

TEST(GetPalindromesDigitRangeTest, GetPalindromesDigitRangeCount)
{
    auto callback =
    [](int date)
    {
        //static std::vector<int> dates;
        static int count = 0;

        if(date == -1)
        {
            EXPECT_EQ(count, 249);
            /*
            // sort by years
            std::sort(dates.begin(), dates.end(),
            [](int a, int b)
            {
                return GetDigitSubstring(a, 0, 4) < GetDigitSubstring(b, 0, 4);
            });

            std::cout << "Count of polindromes from 1.1.2000 to 12.12.3000: " << count << "\n\n";

            for(std::size_t i = 0; i < dates.size(); i++)
            {
                std::cout << GetDigitSubstring(dates[i], 6, 8) << '.' << GetDigitSubstring(dates[i], 4, 6) << '.' << GetDigitSubstring(dates[i], 0, 4) << '\n';
            }
            */

        }

        //if(GetDigitSubstring(date, 4, 6) > 31)
        //    return;
        //dates.push_back(date);
        count++;
    };

    palindrome::GetPalindromesDigitRange({ {1, 10}, {1, 4}, {0, 10}, {2, 3}, {0, 10}, {0, 10}, {0, 10} }, callback);
    palindrome::GetPalindromesDigitRange({ {1, 3}, {0, 3}, {1, 4}, {0, 10}, {2, 3}, {0, 10}, {0, 10}, {0, 10} }, callback);
    callback(-1);
}

TEST(GetValidRangesTest, GetValidRangesFrom2NumbersReturn)
{
    const static std::vector<palindrome::DigitRange> right = { {1, 3}, {0, 3}, {1, 4}, {2, 3} };
    std::vector<palindrome::DigitRange> result = palindrome::detail::GetValidRanges({ {1, 3}, {0, 3}, {1, 4}, {0, 10}, {2, 3}, {0, 10}, {0, 10}, {0, 10} });
    EXPECT_EQ(right.size(), result.size());
    for(std::size_t i = 0; i < result.size(); i++)
    {
        EXPECT_EQ(right[i].min, result[i].min);
        EXPECT_EQ(right[i].max, result[i].max);
    }
}

TEST(GetValidRangesFromNumberTest, GetValidRangesFrom2NumbersReturn)
{
    const static std::vector<palindrome::DigitRange> right = { {0, 3}, {0, 3}, {1, 4}, {2, 3} };
    std::vector<palindrome::DigitRange> result = palindrome::detail::GetValidRangesFromNumber(102000, 22392999);
    EXPECT_EQ(right.size(), result.size());
    for(std::size_t i = 0; i < result.size(); i++)
    {
        EXPECT_EQ(right[i].min, result[i].min);
        EXPECT_EQ(right[i].max, result[i].max);
    }
}

TEST(GetValidRangesFromNumberTest, GetValidRangesFrom1NumberReturn)
{
    const static std::vector<palindrome::DigitRange> right = { {0, 3}, {0, 3}, {0, 4}, {0, 3} };
    std::vector<palindrome::DigitRange> result = palindrome::detail::GetValidRangesFromNumber(22392999);
    EXPECT_EQ(right.size(), result.size());
    for(std::size_t i = 0; i < result.size(); i++)
    {
        EXPECT_EQ(right[i].min, result[i].min);
        EXPECT_EQ(right[i].max, result[i].max);
    }
}

int main(int argc, char **argv)
{
    testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}